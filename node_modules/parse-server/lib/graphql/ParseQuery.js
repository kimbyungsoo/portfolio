"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AtomicOps = exports.ParseQuery = void 0;

var _graphql = require("graphql");

const FloatKeyValIT = new _graphql.GraphQLInputObjectType({
  name: 'FloatConstraint',
  fields: {
    key: {
      type: _graphql.GraphQLString
    },
    value: {
      type: _graphql.GraphQLFloat
    }
  }
});
const StringKeyValIT = new _graphql.GraphQLInputObjectType({
  name: 'StringConstraint',
  fields: {
    key: {
      type: _graphql.GraphQLString
    },
    value: {
      type: _graphql.GraphQLString
    }
  }
});
const ParseQuery = {
  whereLessThan: {
    type: FloatKeyValIT,
    args: FloatKeyValIT.fields,
    description: ''
  },
  whereGreaterThan: {
    type: FloatKeyValIT,
    args: FloatKeyValIT.fields
  },
  whereLessThanOrEqualTo: {
    type: FloatKeyValIT,
    args: FloatKeyValIT.fields
  },
  whereGreaterThanOrEqualTo: {
    type: FloatKeyValIT,
    args: FloatKeyValIT.fields
  },
  whereMatches: {
    type: StringKeyValIT,
    args: StringKeyValIT.fields
  },
  whereExists: {
    type: _graphql.GraphQLString,
    args: {
      key: _graphql.GraphQLString
    }
  },
  whereDoesNotExist: {
    type: _graphql.GraphQLString,
    args: {
      key: _graphql.GraphQLString
    }
  },
  whereStartsWith: {
    type: StringKeyValIT,
    args: StringKeyValIT.fields
  },
  whereEndsWith: {
    type: StringKeyValIT,
    args: StringKeyValIT.fields
  }
};
/* eslint-disable */

exports.ParseQuery = ParseQuery;
const AtomicOps = {
  incrementKey: {
    type: FloatKeyValIT,
    args: FloatKeyValIT.fields
  },
  unsetKey: {
    type: _graphql.GraphQLString,
    args: {
      key: _graphql.GraphQLString
    }
  }
};
exports.AtomicOps = AtomicOps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaHFsL1BhcnNlUXVlcnkuanMiXSwibmFtZXMiOlsiRmxvYXRLZXlWYWxJVCIsIkdyYXBoUUxJbnB1dE9iamVjdFR5cGUiLCJuYW1lIiwiZmllbGRzIiwia2V5IiwidHlwZSIsIkdyYXBoUUxTdHJpbmciLCJ2YWx1ZSIsIkdyYXBoUUxGbG9hdCIsIlN0cmluZ0tleVZhbElUIiwiUGFyc2VRdWVyeSIsIndoZXJlTGVzc1RoYW4iLCJhcmdzIiwiZGVzY3JpcHRpb24iLCJ3aGVyZUdyZWF0ZXJUaGFuIiwid2hlcmVMZXNzVGhhbk9yRXF1YWxUbyIsIndoZXJlR3JlYXRlclRoYW5PckVxdWFsVG8iLCJ3aGVyZU1hdGNoZXMiLCJ3aGVyZUV4aXN0cyIsIndoZXJlRG9lc05vdEV4aXN0Iiwid2hlcmVTdGFydHNXaXRoIiwid2hlcmVFbmRzV2l0aCIsIkF0b21pY09wcyIsImluY3JlbWVudEtleSIsInVuc2V0S2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBTUEsTUFBTUEsYUFBYSxHQUFHLElBQUlDLCtCQUFKLENBQTJCO0FBQy9DQyxFQUFBQSxJQUFJLEVBQUUsaUJBRHlDO0FBRS9DQyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsR0FBRyxFQUFFO0FBQUVDLE1BQUFBLElBQUksRUFBRUM7QUFBUixLQURDO0FBRU5DLElBQUFBLEtBQUssRUFBRTtBQUFFRixNQUFBQSxJQUFJLEVBQUVHO0FBQVI7QUFGRDtBQUZ1QyxDQUEzQixDQUF0QjtBQVFBLE1BQU1DLGNBQWMsR0FBRyxJQUFJUiwrQkFBSixDQUEyQjtBQUNoREMsRUFBQUEsSUFBSSxFQUFFLGtCQUQwQztBQUVoREMsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLEdBQUcsRUFBRTtBQUFFQyxNQUFBQSxJQUFJLEVBQUVDO0FBQVIsS0FEQztBQUVOQyxJQUFBQSxLQUFLLEVBQUU7QUFBRUYsTUFBQUEsSUFBSSxFQUFFQztBQUFSO0FBRkQ7QUFGd0MsQ0FBM0IsQ0FBdkI7QUFRTyxNQUFNSSxVQUFVLEdBQUc7QUFDeEJDLEVBQUFBLGFBQWEsRUFBRTtBQUNiTixJQUFBQSxJQUFJLEVBQUVMLGFBRE87QUFFYlksSUFBQUEsSUFBSSxFQUFFWixhQUFhLENBQUNHLE1BRlA7QUFHYlUsSUFBQUEsV0FBVyxFQUFFO0FBSEEsR0FEUztBQU14QkMsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJULElBQUFBLElBQUksRUFBRUwsYUFEVTtBQUVoQlksSUFBQUEsSUFBSSxFQUFFWixhQUFhLENBQUNHO0FBRkosR0FOTTtBQVV4QlksRUFBQUEsc0JBQXNCLEVBQUU7QUFDdEJWLElBQUFBLElBQUksRUFBRUwsYUFEZ0I7QUFFdEJZLElBQUFBLElBQUksRUFBRVosYUFBYSxDQUFDRztBQUZFLEdBVkE7QUFjeEJhLEVBQUFBLHlCQUF5QixFQUFFO0FBQ3pCWCxJQUFBQSxJQUFJLEVBQUVMLGFBRG1CO0FBRXpCWSxJQUFBQSxJQUFJLEVBQUVaLGFBQWEsQ0FBQ0c7QUFGSyxHQWRIO0FBa0J4QmMsRUFBQUEsWUFBWSxFQUFFO0FBQ1paLElBQUFBLElBQUksRUFBRUksY0FETTtBQUVaRyxJQUFBQSxJQUFJLEVBQUVILGNBQWMsQ0FBQ047QUFGVCxHQWxCVTtBQXNCeEJlLEVBQUFBLFdBQVcsRUFBRTtBQUNYYixJQUFBQSxJQUFJLEVBQUVDLHNCQURLO0FBRVhNLElBQUFBLElBQUksRUFBRTtBQUFFUixNQUFBQSxHQUFHLEVBQUVFO0FBQVA7QUFGSyxHQXRCVztBQTBCeEJhLEVBQUFBLGlCQUFpQixFQUFFO0FBQ2pCZCxJQUFBQSxJQUFJLEVBQUVDLHNCQURXO0FBRWpCTSxJQUFBQSxJQUFJLEVBQUU7QUFBRVIsTUFBQUEsR0FBRyxFQUFFRTtBQUFQO0FBRlcsR0ExQks7QUE4QnhCYyxFQUFBQSxlQUFlLEVBQUU7QUFDZmYsSUFBQUEsSUFBSSxFQUFFSSxjQURTO0FBRWZHLElBQUFBLElBQUksRUFBRUgsY0FBYyxDQUFDTjtBQUZOLEdBOUJPO0FBa0N4QmtCLEVBQUFBLGFBQWEsRUFBRTtBQUNiaEIsSUFBQUEsSUFBSSxFQUFFSSxjQURPO0FBRWJHLElBQUFBLElBQUksRUFBRUgsY0FBYyxDQUFDTjtBQUZSO0FBbENTLENBQW5CO0FBd0NQOzs7QUFFTyxNQUFNbUIsU0FBUyxHQUFHO0FBQ3ZCQyxFQUFBQSxZQUFZLEVBQUU7QUFDWmxCLElBQUFBLElBQUksRUFBRUwsYUFETTtBQUVaWSxJQUFBQSxJQUFJLEVBQUVaLGFBQWEsQ0FBQ0c7QUFGUixHQURTO0FBS3ZCcUIsRUFBQUEsUUFBUSxFQUFFO0FBQ1JuQixJQUFBQSxJQUFJLEVBQUVDLHNCQURFO0FBRVJNLElBQUFBLElBQUksRUFBRTtBQUFFUixNQUFBQSxHQUFHLEVBQUVFO0FBQVA7QUFGRTtBQUxhLENBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTElucHV0T2JqZWN0VHlwZSxcbiAgR3JhcGhRTEZsb2F0LFxuICBHcmFwaFFMU3RyaW5nLFxufSBmcm9tICdncmFwaHFsJ1xuXG5jb25zdCBGbG9hdEtleVZhbElUID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICBuYW1lOiAnRmxvYXRDb25zdHJhaW50JyxcbiAgZmllbGRzOiB7XG4gICAga2V5OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICB2YWx1ZTogeyB0eXBlOiBHcmFwaFFMRmxvYXQgfVxuICB9XG59KTtcblxuY29uc3QgU3RyaW5nS2V5VmFsSVQgPSBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdTdHJpbmdDb25zdHJhaW50JyxcbiAgZmllbGRzOiB7XG4gICAga2V5OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAgICB2YWx1ZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH1cbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBQYXJzZVF1ZXJ5ID0ge1xuICB3aGVyZUxlc3NUaGFuOiB7XG4gICAgdHlwZTogRmxvYXRLZXlWYWxJVCxcbiAgICBhcmdzOiBGbG9hdEtleVZhbElULmZpZWxkcyxcbiAgICBkZXNjcmlwdGlvbjogJydcbiAgfSxcbiAgd2hlcmVHcmVhdGVyVGhhbjoge1xuICAgIHR5cGU6IEZsb2F0S2V5VmFsSVQsXG4gICAgYXJnczogRmxvYXRLZXlWYWxJVC5maWVsZHNcbiAgfSxcbiAgd2hlcmVMZXNzVGhhbk9yRXF1YWxUbzoge1xuICAgIHR5cGU6IEZsb2F0S2V5VmFsSVQsXG4gICAgYXJnczogRmxvYXRLZXlWYWxJVC5maWVsZHNcbiAgfSxcbiAgd2hlcmVHcmVhdGVyVGhhbk9yRXF1YWxUbzoge1xuICAgIHR5cGU6IEZsb2F0S2V5VmFsSVQsXG4gICAgYXJnczogRmxvYXRLZXlWYWxJVC5maWVsZHNcbiAgfSxcbiAgd2hlcmVNYXRjaGVzOiB7XG4gICAgdHlwZTogU3RyaW5nS2V5VmFsSVQsXG4gICAgYXJnczogU3RyaW5nS2V5VmFsSVQuZmllbGRzXG4gIH0sXG4gIHdoZXJlRXhpc3RzOiB7XG4gICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICBhcmdzOiB7IGtleTogR3JhcGhRTFN0cmluZyB9XG4gIH0sXG4gIHdoZXJlRG9lc05vdEV4aXN0OiB7XG4gICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICBhcmdzOiB7IGtleTogR3JhcGhRTFN0cmluZyB9XG4gIH0sXG4gIHdoZXJlU3RhcnRzV2l0aDoge1xuICAgIHR5cGU6IFN0cmluZ0tleVZhbElULFxuICAgIGFyZ3M6IFN0cmluZ0tleVZhbElULmZpZWxkc1xuICB9LFxuICB3aGVyZUVuZHNXaXRoOiB7XG4gICAgdHlwZTogU3RyaW5nS2V5VmFsSVQsXG4gICAgYXJnczogU3RyaW5nS2V5VmFsSVQuZmllbGRzXG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbmV4cG9ydCBjb25zdCBBdG9taWNPcHMgPSB7XG4gIGluY3JlbWVudEtleToge1xuICAgIHR5cGU6IEZsb2F0S2V5VmFsSVQsXG4gICAgYXJnczogRmxvYXRLZXlWYWxJVC5maWVsZHNcbiAgfSxcbiAgdW5zZXRLZXk6IHtcbiAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgIGFyZ3M6IHsga2V5OiBHcmFwaFFMU3RyaW5nIH1cbiAgfVxufVxuIl19