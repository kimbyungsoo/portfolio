"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLParseSchema = void 0;

var _graphql = require("graphql");

var _Config = _interopRequireDefault(require("../Config"));

var _ParseClass = _interopRequireDefault(require("./schemas/ParseClass"));

var _UserAuth = _interopRequireDefault(require("./schemas/UserAuth"));

var _Node = _interopRequireDefault(require("./schemas/Node"));

var _Functions = _interopRequireDefault(require("./schemas/Functions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GraphQLParseSchema {
  constructor(applicationId) {
    this.applicationId = applicationId;
  }

  static async loadSchemaFromDatabase(applicationId) {
    const schema = await _Config.default.get(applicationId).database.loadSchema();
    const allClasses = await schema.getAllClasses(true);
    const classNames = [];
    const fullSchema = allClasses.reduce((memo, classDef) => {
      memo[classDef.className] = classDef;
      classNames.push(classDef.className);
      return memo;
    }, {});
    fullSchema.__classNames = classNames;
    return Object.freeze(fullSchema);
  }

  async load() {
    this.schema = await GraphQLParseSchema.loadSchemaFromDatabase(this.applicationId);
    const graphQLSchema = new _graphql.GraphQLSchema({
      query: this.Query(),
      mutation: this.Mutation()
    });
    return {
      schema: graphQLSchema,
      rootValue: this.Root()
    };
  }

  Query() {
    return new _graphql.GraphQLObjectType({
      name: 'Query',
      description: `The query root of you Parse Server's graphQL interface`,
      fields: () => {
        const fields = {};
        Object.assign(fields, _Node.default.Query(this.schema));
        Object.assign(fields, _UserAuth.default.Query(this.schema));
        Object.assign(fields, _ParseClass.default.Query(this.schema));
        return fields;
      }
    });
  }

  Mutation() {
    const fields = {};
    Object.assign(fields, _UserAuth.default.Mutation(this.schema));
    Object.assign(fields, _ParseClass.default.Mutation(this.schema));
    Object.assign(fields, _Functions.default.Mutation(this.schema));
    return new _graphql.GraphQLObjectType({
      name: 'Mutation',
      fields
    });
  }

  Root() {
    return this.schema.__classNames.reduce((memo, className) => {
      memo[className] = {};
      return memo;
    }, {});
  }

}

exports.GraphQLParseSchema = GraphQLParseSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaHFsL1NjaGVtYS5qcyJdLCJuYW1lcyI6WyJHcmFwaFFMUGFyc2VTY2hlbWEiLCJjb25zdHJ1Y3RvciIsImFwcGxpY2F0aW9uSWQiLCJsb2FkU2NoZW1hRnJvbURhdGFiYXNlIiwic2NoZW1hIiwiQ29uZmlnIiwiZ2V0IiwiZGF0YWJhc2UiLCJsb2FkU2NoZW1hIiwiYWxsQ2xhc3NlcyIsImdldEFsbENsYXNzZXMiLCJjbGFzc05hbWVzIiwiZnVsbFNjaGVtYSIsInJlZHVjZSIsIm1lbW8iLCJjbGFzc0RlZiIsImNsYXNzTmFtZSIsInB1c2giLCJfX2NsYXNzTmFtZXMiLCJPYmplY3QiLCJmcmVlemUiLCJsb2FkIiwiZ3JhcGhRTFNjaGVtYSIsIkdyYXBoUUxTY2hlbWEiLCJxdWVyeSIsIlF1ZXJ5IiwibXV0YXRpb24iLCJNdXRhdGlvbiIsInJvb3RWYWx1ZSIsIlJvb3QiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImZpZWxkcyIsImFzc2lnbiIsIk5vZGVTY2hlbWEiLCJVc2VyQXV0aFNjaGVtYSIsIlBhcnNlQ2xhc3NTY2hlbWEiLCJGdW5jdGlvbnNTY2hlbWEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLGtCQUFOLENBQXlCO0FBSTlCQyxFQUFBQSxXQUFXLENBQUNDLGFBQUQsRUFBZ0I7QUFDekIsU0FBS0EsYUFBTCxHQUFxQkEsYUFBckI7QUFDRDs7QUFFRCxlQUFhQyxzQkFBYixDQUFvQ0QsYUFBcEMsRUFBbUQ7QUFDakQsVUFBTUUsTUFBTSxHQUFHLE1BQU1DLGdCQUFPQyxHQUFQLENBQVdKLGFBQVgsRUFBMEJLLFFBQTFCLENBQW1DQyxVQUFuQyxFQUFyQjtBQUNBLFVBQU1DLFVBQVUsR0FBRyxNQUFNTCxNQUFNLENBQUNNLGFBQVAsQ0FBcUIsSUFBckIsQ0FBekI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7QUFDQSxVQUFNQyxVQUFVLEdBQUdILFVBQVUsQ0FBQ0ksTUFBWCxDQUFrQixDQUFDQyxJQUFELEVBQU9DLFFBQVAsS0FBb0I7QUFDdkRELE1BQUFBLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxTQUFWLENBQUosR0FBMkJELFFBQTNCO0FBQ0FKLE1BQUFBLFVBQVUsQ0FBQ00sSUFBWCxDQUFnQkYsUUFBUSxDQUFDQyxTQUF6QjtBQUNBLGFBQU9GLElBQVA7QUFDRCxLQUprQixFQUloQixFQUpnQixDQUFuQjtBQUtBRixJQUFBQSxVQUFVLENBQUNNLFlBQVgsR0FBMEJQLFVBQTFCO0FBQ0EsV0FBT1EsTUFBTSxDQUFDQyxNQUFQLENBQWNSLFVBQWQsQ0FBUDtBQUNEOztBQUVELFFBQU1TLElBQU4sR0FBYTtBQUNYLFNBQUtqQixNQUFMLEdBQWMsTUFBTUosa0JBQWtCLENBQUNHLHNCQUFuQixDQUNsQixLQUFLRCxhQURhLENBQXBCO0FBR0EsVUFBTW9CLGFBQWEsR0FBRyxJQUFJQyxzQkFBSixDQUFrQjtBQUN0Q0MsTUFBQUEsS0FBSyxFQUFFLEtBQUtDLEtBQUwsRUFEK0I7QUFFdENDLE1BQUFBLFFBQVEsRUFBRSxLQUFLQyxRQUFMO0FBRjRCLEtBQWxCLENBQXRCO0FBSUEsV0FBTztBQUFFdkIsTUFBQUEsTUFBTSxFQUFFa0IsYUFBVjtBQUF5Qk0sTUFBQUEsU0FBUyxFQUFFLEtBQUtDLElBQUw7QUFBcEMsS0FBUDtBQUNEOztBQUVESixFQUFBQSxLQUFLLEdBQUc7QUFDTixXQUFPLElBQUlLLDBCQUFKLENBQXNCO0FBQzNCQyxNQUFBQSxJQUFJLEVBQUUsT0FEcUI7QUFFM0JDLE1BQUFBLFdBQVcsRUFBRyx3REFGYTtBQUczQkMsTUFBQUEsTUFBTSxFQUFFLE1BQU07QUFDWixjQUFNQSxNQUFNLEdBQUcsRUFBZjtBQUNBZCxRQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY0QsTUFBZCxFQUFzQkUsY0FBV1YsS0FBWCxDQUFpQixLQUFLckIsTUFBdEIsQ0FBdEI7QUFDQWUsUUFBQUEsTUFBTSxDQUFDZSxNQUFQLENBQWNELE1BQWQsRUFBc0JHLGtCQUFlWCxLQUFmLENBQXFCLEtBQUtyQixNQUExQixDQUF0QjtBQUNBZSxRQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY0QsTUFBZCxFQUFzQkksb0JBQWlCWixLQUFqQixDQUF1QixLQUFLckIsTUFBNUIsQ0FBdEI7QUFDQSxlQUFPNkIsTUFBUDtBQUNEO0FBVDBCLEtBQXRCLENBQVA7QUFXRDs7QUFFRE4sRUFBQUEsUUFBUSxHQUFHO0FBQ1QsVUFBTU0sTUFBTSxHQUFHLEVBQWY7QUFDQWQsSUFBQUEsTUFBTSxDQUFDZSxNQUFQLENBQWNELE1BQWQsRUFBc0JHLGtCQUFlVCxRQUFmLENBQXdCLEtBQUt2QixNQUE3QixDQUF0QjtBQUNBZSxJQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY0QsTUFBZCxFQUFzQkksb0JBQWlCVixRQUFqQixDQUEwQixLQUFLdkIsTUFBL0IsQ0FBdEI7QUFDQWUsSUFBQUEsTUFBTSxDQUFDZSxNQUFQLENBQWNELE1BQWQsRUFBc0JLLG1CQUFnQlgsUUFBaEIsQ0FBeUIsS0FBS3ZCLE1BQTlCLENBQXRCO0FBRUEsV0FBTyxJQUFJMEIsMEJBQUosQ0FBc0I7QUFDM0JDLE1BQUFBLElBQUksRUFBRSxVQURxQjtBQUUzQkUsTUFBQUE7QUFGMkIsS0FBdEIsQ0FBUDtBQUlEOztBQUVESixFQUFBQSxJQUFJLEdBQUc7QUFDTCxXQUFPLEtBQUt6QixNQUFMLENBQVljLFlBQVosQ0FBeUJMLE1BQXpCLENBQWdDLENBQUNDLElBQUQsRUFBT0UsU0FBUCxLQUFxQjtBQUMxREYsTUFBQUEsSUFBSSxDQUFDRSxTQUFELENBQUosR0FBa0IsRUFBbEI7QUFDQSxhQUFPRixJQUFQO0FBQ0QsS0FITSxFQUdKLEVBSEksQ0FBUDtBQUlEOztBQS9ENkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMU2NoZW1hLCBHcmFwaFFMT2JqZWN0VHlwZSB9IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uL0NvbmZpZyc7XG5cbmltcG9ydCBQYXJzZUNsYXNzU2NoZW1hIGZyb20gJy4vc2NoZW1hcy9QYXJzZUNsYXNzJztcbmltcG9ydCBVc2VyQXV0aFNjaGVtYSBmcm9tICcuL3NjaGVtYXMvVXNlckF1dGgnO1xuaW1wb3J0IE5vZGVTY2hlbWEgZnJvbSAnLi9zY2hlbWFzL05vZGUnO1xuaW1wb3J0IEZ1bmN0aW9uc1NjaGVtYSBmcm9tICcuL3NjaGVtYXMvRnVuY3Rpb25zJztcblxuZXhwb3J0IGNsYXNzIEdyYXBoUUxQYXJzZVNjaGVtYSB7XG4gIHNjaGVtYTtcbiAgYXBwbGljYXRpb25JZDtcblxuICBjb25zdHJ1Y3RvcihhcHBsaWNhdGlvbklkKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbklkID0gYXBwbGljYXRpb25JZDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkU2NoZW1hRnJvbURhdGFiYXNlKGFwcGxpY2F0aW9uSWQpIHtcbiAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCBDb25maWcuZ2V0KGFwcGxpY2F0aW9uSWQpLmRhdGFiYXNlLmxvYWRTY2hlbWEoKTtcbiAgICBjb25zdCBhbGxDbGFzc2VzID0gYXdhaXQgc2NoZW1hLmdldEFsbENsYXNzZXModHJ1ZSk7XG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IFtdO1xuICAgIGNvbnN0IGZ1bGxTY2hlbWEgPSBhbGxDbGFzc2VzLnJlZHVjZSgobWVtbywgY2xhc3NEZWYpID0+IHtcbiAgICAgIG1lbW9bY2xhc3NEZWYuY2xhc3NOYW1lXSA9IGNsYXNzRGVmO1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKGNsYXNzRGVmLmNsYXNzTmFtZSk7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSk7XG4gICAgZnVsbFNjaGVtYS5fX2NsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKGZ1bGxTY2hlbWEpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICB0aGlzLnNjaGVtYSA9IGF3YWl0IEdyYXBoUUxQYXJzZVNjaGVtYS5sb2FkU2NoZW1hRnJvbURhdGFiYXNlKFxuICAgICAgdGhpcy5hcHBsaWNhdGlvbklkXG4gICAgKTtcbiAgICBjb25zdCBncmFwaFFMU2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICAgICAgcXVlcnk6IHRoaXMuUXVlcnkoKSxcbiAgICAgIG11dGF0aW9uOiB0aGlzLk11dGF0aW9uKCksXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgc2NoZW1hOiBncmFwaFFMU2NoZW1hLCByb290VmFsdWU6IHRoaXMuUm9vdCgpIH07XG4gIH1cblxuICBRdWVyeSgpIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6ICdRdWVyeScsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoZSBxdWVyeSByb290IG9mIHlvdSBQYXJzZSBTZXJ2ZXIncyBncmFwaFFMIGludGVyZmFjZWAsXG4gICAgICBmaWVsZHM6ICgpID0+IHtcbiAgICAgICAgY29uc3QgZmllbGRzID0ge307XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZmllbGRzLCBOb2RlU2NoZW1hLlF1ZXJ5KHRoaXMuc2NoZW1hKSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZmllbGRzLCBVc2VyQXV0aFNjaGVtYS5RdWVyeSh0aGlzLnNjaGVtYSkpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkcywgUGFyc2VDbGFzc1NjaGVtYS5RdWVyeSh0aGlzLnNjaGVtYSkpO1xuICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIE11dGF0aW9uKCkge1xuICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oZmllbGRzLCBVc2VyQXV0aFNjaGVtYS5NdXRhdGlvbih0aGlzLnNjaGVtYSkpO1xuICAgIE9iamVjdC5hc3NpZ24oZmllbGRzLCBQYXJzZUNsYXNzU2NoZW1hLk11dGF0aW9uKHRoaXMuc2NoZW1hKSk7XG4gICAgT2JqZWN0LmFzc2lnbihmaWVsZHMsIEZ1bmN0aW9uc1NjaGVtYS5NdXRhdGlvbih0aGlzLnNjaGVtYSkpO1xuXG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiAnTXV0YXRpb24nLFxuICAgICAgZmllbGRzLFxuICAgIH0pO1xuICB9XG5cbiAgUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlbWEuX19jbGFzc05hbWVzLnJlZHVjZSgobWVtbywgY2xhc3NOYW1lKSA9PiB7XG4gICAgICBtZW1vW2NsYXNzTmFtZV0gPSB7fTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KTtcbiAgfVxufVxuIl19