"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointerQuery = exports.PointerInput = exports.Pointer = void 0;

var _graphql = require("graphql");

var _JSONParseQuery = require("./JSONParseQuery");

var _typesCache = require("../typesCache");

const Pointer = new _graphql.GraphQLInputObjectType({
  name: 'Pointer',
  fields: {
    objectId: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
      description: "pointer's objectId"
    },
    className: {
      type: _graphql.GraphQLString,
      description: "pointer's className"
    }
  }
});
exports.Pointer = Pointer;

const PointerInput = field => {
  const name = `${field.targetClass}PointerInput`;
  return (0, _typesCache.getOrElse)(name, () => new _graphql.GraphQLInputObjectType({
    name,
    fields: {
      objectId: {
        type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),
        description: "pointer's objectId"
      },
      className: {
        type: _graphql.GraphQLString,
        description: "pointer's className",
        defaultValue: field.targetClass
      }
    }
  }));
};

exports.PointerInput = PointerInput;

const PointerQuery = field => {
  const name = `${field.targetClass}PointerQuery`;
  return (0, _typesCache.getOrElse)(name, () => new _graphql.GraphQLInputObjectType({
    name,
    fields: {
      eq: {
        type: PointerInput(field)
      },
      inQuery: {
        type: _JSONParseQuery.JSONParseQuery
      },
      notInQuery: {
        type: _JSONParseQuery.JSONParseQuery
      }
    }
  }));
};

exports.PointerQuery = PointerQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL1BvaW50ZXIuanMiXSwibmFtZXMiOlsiUG9pbnRlciIsIkdyYXBoUUxJbnB1dE9iamVjdFR5cGUiLCJuYW1lIiwiZmllbGRzIiwib2JqZWN0SWQiLCJ0eXBlIiwiR3JhcGhRTE5vbk51bGwiLCJHcmFwaFFMSUQiLCJkZXNjcmlwdGlvbiIsImNsYXNzTmFtZSIsIkdyYXBoUUxTdHJpbmciLCJQb2ludGVySW5wdXQiLCJmaWVsZCIsInRhcmdldENsYXNzIiwiZGVmYXVsdFZhbHVlIiwiUG9pbnRlclF1ZXJ5IiwiZXEiLCJpblF1ZXJ5IiwiSlNPTlBhcnNlUXVlcnkiLCJub3RJblF1ZXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBT0E7O0FBRUE7O0FBRU8sTUFBTUEsT0FBTyxHQUFHLElBQUlDLCtCQUFKLENBQTJCO0FBQ2hEQyxFQUFBQSxJQUFJLEVBQUUsU0FEMEM7QUFFaERDLEVBQUFBLE1BQU0sRUFBRTtBQUNOQyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsSUFBSSxFQUFFLElBQUlDLHVCQUFKLENBQW1CQyxrQkFBbkIsQ0FERTtBQUVSQyxNQUFBQSxXQUFXLEVBQUU7QUFGTCxLQURKO0FBS05DLElBQUFBLFNBQVMsRUFBRTtBQUNUSixNQUFBQSxJQUFJLEVBQUVLLHNCQURHO0FBRVRGLE1BQUFBLFdBQVcsRUFBRTtBQUZKO0FBTEw7QUFGd0MsQ0FBM0IsQ0FBaEI7OztBQWNBLE1BQU1HLFlBQVksR0FBR0MsS0FBSyxJQUFJO0FBQ25DLFFBQU1WLElBQUksR0FBSSxHQUFFVSxLQUFLLENBQUNDLFdBQVksY0FBbEM7QUFDQSxTQUFPLDJCQUNMWCxJQURLLEVBRUwsTUFDRSxJQUFJRCwrQkFBSixDQUEyQjtBQUN6QkMsSUFBQUEsSUFEeUI7QUFFekJDLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxRQUFRLEVBQUU7QUFDUkMsUUFBQUEsSUFBSSxFQUFFLElBQUlDLHVCQUFKLENBQW1CQyxrQkFBbkIsQ0FERTtBQUVSQyxRQUFBQSxXQUFXLEVBQUU7QUFGTCxPQURKO0FBS05DLE1BQUFBLFNBQVMsRUFBRTtBQUNUSixRQUFBQSxJQUFJLEVBQUVLLHNCQURHO0FBRVRGLFFBQUFBLFdBQVcsRUFBRSxxQkFGSjtBQUdUTSxRQUFBQSxZQUFZLEVBQUVGLEtBQUssQ0FBQ0M7QUFIWDtBQUxMO0FBRmlCLEdBQTNCLENBSEcsQ0FBUDtBQWtCRCxDQXBCTTs7OztBQXNCQSxNQUFNRSxZQUFZLEdBQUdILEtBQUssSUFBSTtBQUNuQyxRQUFNVixJQUFJLEdBQUksR0FBRVUsS0FBSyxDQUFDQyxXQUFZLGNBQWxDO0FBQ0EsU0FBTywyQkFDTFgsSUFESyxFQUVMLE1BQ0UsSUFBSUQsK0JBQUosQ0FBMkI7QUFDekJDLElBQUFBLElBRHlCO0FBRXpCQyxJQUFBQSxNQUFNLEVBQUU7QUFDTmEsTUFBQUEsRUFBRSxFQUFFO0FBQ0ZYLFFBQUFBLElBQUksRUFBRU0sWUFBWSxDQUFDQyxLQUFEO0FBRGhCLE9BREU7QUFJTkssTUFBQUEsT0FBTyxFQUFFO0FBQ1BaLFFBQUFBLElBQUksRUFBRWE7QUFEQyxPQUpIO0FBT05DLE1BQUFBLFVBQVUsRUFBRTtBQUNWZCxRQUFBQSxJQUFJLEVBQUVhO0FBREk7QUFQTjtBQUZpQixHQUEzQixDQUhHLENBQVA7QUFrQkQsQ0FwQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLFxuICBHcmFwaFFMSUQsXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxOb25OdWxsLFxufSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgSlNPTlBhcnNlUXVlcnkgfSBmcm9tICcuL0pTT05QYXJzZVF1ZXJ5JztcblxuaW1wb3J0IHsgZ2V0T3JFbHNlIH0gZnJvbSAnLi4vdHlwZXNDYWNoZSc7XG5cbmV4cG9ydCBjb25zdCBQb2ludGVyID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICBuYW1lOiAnUG9pbnRlcicsXG4gIGZpZWxkczoge1xuICAgIG9iamVjdElkOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTElEKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcInBvaW50ZXIncyBvYmplY3RJZFwiLFxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgZGVzY3JpcHRpb246IFwicG9pbnRlcidzIGNsYXNzTmFtZVwiLFxuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IFBvaW50ZXJJbnB1dCA9IGZpZWxkID0+IHtcbiAgY29uc3QgbmFtZSA9IGAke2ZpZWxkLnRhcmdldENsYXNzfVBvaW50ZXJJbnB1dGA7XG4gIHJldHVybiBnZXRPckVsc2UoXG4gICAgbmFtZSxcbiAgICAoKSA9PlxuICAgICAgbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICBvYmplY3RJZDoge1xuICAgICAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxJRCksXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJwb2ludGVyJ3Mgb2JqZWN0SWRcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsYXNzTmFtZToge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInBvaW50ZXIncyBjbGFzc05hbWVcIixcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGQudGFyZ2V0Q2xhc3MsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgUG9pbnRlclF1ZXJ5ID0gZmllbGQgPT4ge1xuICBjb25zdCBuYW1lID0gYCR7ZmllbGQudGFyZ2V0Q2xhc3N9UG9pbnRlclF1ZXJ5YDtcbiAgcmV0dXJuIGdldE9yRWxzZShcbiAgICBuYW1lLFxuICAgICgpID0+XG4gICAgICBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGZpZWxkczoge1xuICAgICAgICAgIGVxOiB7XG4gICAgICAgICAgICB0eXBlOiBQb2ludGVySW5wdXQoZmllbGQpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5RdWVyeToge1xuICAgICAgICAgICAgdHlwZTogSlNPTlBhcnNlUXVlcnksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBub3RJblF1ZXJ5OiB7XG4gICAgICAgICAgICB0eXBlOiBKU09OUGFyc2VRdWVyeSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgKTtcbn07XG4iXX0=