"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.type = type;
exports.inputType = inputType;
exports.queryType = queryType;
Object.defineProperty(exports, "ACL", {
  enumerable: true,
  get: function () {
    return _ACL.ACL;
  }
});
Object.defineProperty(exports, "ACLInput", {
  enumerable: true,
  get: function () {
    return _ACL.ACLInput;
  }
});
Object.defineProperty(exports, "GeoPoint", {
  enumerable: true,
  get: function () {
    return _GeoPoint.GeoPoint;
  }
});
Object.defineProperty(exports, "GeoPointInput", {
  enumerable: true,
  get: function () {
    return _GeoPoint.GeoPointInput;
  }
});
Object.defineProperty(exports, "File", {
  enumerable: true,
  get: function () {
    return _File.File;
  }
});
Object.defineProperty(exports, "FileInput", {
  enumerable: true,
  get: function () {
    return _File.FileInput;
  }
});
Object.defineProperty(exports, "Date", {
  enumerable: true,
  get: function () {
    return _Date.Date;
  }
});
Object.defineProperty(exports, "Pointer", {
  enumerable: true,
  get: function () {
    return _Pointer.Pointer;
  }
});
Object.defineProperty(exports, "JSONObject", {
  enumerable: true,
  get: function () {
    return _JSONObject.JSONObject;
  }
});
Object.defineProperty(exports, "PageInfo", {
  enumerable: true,
  get: function () {
    return _PageInfo.PageInfo;
  }
});
exports.BooleanQuery = void 0;

var _graphql = require("graphql");

var _ACL = require("./ACL");

var _GeoPoint = require("./GeoPoint");

var _File = require("./File");

var _Date = require("./Date");

var _Pointer = require("./Pointer");

var _JSONObject = require("./JSONObject");

var _StringQuery = require("./StringQuery");

var _NumberQuery = require("./NumberQuery");

var _NumberInput = require("./NumberInput");

var _PageInfo = require("./PageInfo");

var _Array = require("./Array");

var _BaseQuery = require("./BaseQuery");

const types = {
  String: _graphql.GraphQLString,
  Number: _graphql.GraphQLFloat,
  Boolean: _graphql.GraphQLBoolean,
  GeoPoint: _GeoPoint.GeoPoint,
  File: _File.File,
  ACL: _ACL.ACL,
  Date: _Date.Date,
  Pointer: _Pointer.Pointer,
  Object: _JSONObject.JSONObject,
  Array: new _graphql.GraphQLList(_JSONObject.JSONObject)
};
const BooleanQuery = new _graphql.GraphQLInputObjectType({
  name: 'BooleanQuery',
  fields: (0, _BaseQuery.BaseQuery)(_graphql.GraphQLBoolean)
});
exports.BooleanQuery = BooleanQuery;

function type({
  type
}) {
  return types[type];
}

function inputType(field) {
  const {
    type
  } = field;

  if (type == 'String') {
    return _graphql.GraphQLString;
  }

  if (type == 'Number') {
    return _NumberInput.NumberInput;
  }

  if (type == 'Boolean') {
    return _graphql.GraphQLBoolean;
  }

  if (type == 'GeoPoint') {
    return _GeoPoint.GeoPointInput;
  }

  if (type == 'File') {
    return _File.FileInput;
  } else if (type == 'ACL') {
    return _ACL.ACLInput;
  } else if (type == 'Date') {
    return _Date.Date;
  } else if (type == 'Pointer') {
    return (0, _Pointer.PointerInput)(field);
  } else if (type === 'Array') {
    return new _graphql.GraphQLList(_JSONObject.JSONObject);
  } else if (type === 'Object') {
    return _JSONObject.JSONObject;
  }
}

function queryType(field) {
  const {
    type
  } = field;

  if (type == 'String') {
    return _StringQuery.StringQuery;
  }

  if (type == 'Number') {
    return _NumberQuery.NumberQuery;
  }

  if (type == 'Boolean') {
    return BooleanQuery;
  }

  if (type == 'GeoPoint') {
    return _GeoPoint.GeoPointQuery;
  }

  if (type == 'File') {
    // Cannot query on files
    return;
  } else if (type == 'ACL') {
    // cannot query on ACL!
    return;
  } else if (type == 'Date') {
    return _Date.DateQuery;
  } else if (type == 'Pointer') {
    return (0, _Pointer.PointerQuery)(field);
  } else if (type == 'Array') {
    return _Array.ArrayQuery;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL2luZGV4LmpzIl0sIm5hbWVzIjpbInR5cGVzIiwiU3RyaW5nIiwiR3JhcGhRTFN0cmluZyIsIk51bWJlciIsIkdyYXBoUUxGbG9hdCIsIkJvb2xlYW4iLCJHcmFwaFFMQm9vbGVhbiIsIkdlb1BvaW50IiwiRmlsZSIsIkFDTCIsIkRhdGUiLCJQb2ludGVyIiwiT2JqZWN0IiwiSlNPTk9iamVjdCIsIkFycmF5IiwiR3JhcGhRTExpc3QiLCJCb29sZWFuUXVlcnkiLCJHcmFwaFFMSW5wdXRPYmplY3RUeXBlIiwibmFtZSIsImZpZWxkcyIsInR5cGUiLCJpbnB1dFR5cGUiLCJmaWVsZCIsIk51bWJlcklucHV0IiwiR2VvUG9pbnRJbnB1dCIsIkZpbGVJbnB1dCIsIkFDTElucHV0IiwicXVlcnlUeXBlIiwiU3RyaW5nUXVlcnkiLCJOdW1iZXJRdWVyeSIsIkdlb1BvaW50UXVlcnkiLCJEYXRlUXVlcnkiLCJBcnJheVF1ZXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBU0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBZUEsTUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLE1BQU0sRUFBRUMsc0JBREk7QUFFWkMsRUFBQUEsTUFBTSxFQUFFQyxxQkFGSTtBQUdaQyxFQUFBQSxPQUFPLEVBQUVDLHVCQUhHO0FBSVpDLEVBQUFBLFFBQVEsRUFBUkEsa0JBSlk7QUFLWkMsRUFBQUEsSUFBSSxFQUFKQSxVQUxZO0FBTVpDLEVBQUFBLEdBQUcsRUFBSEEsUUFOWTtBQU9aQyxFQUFBQSxJQUFJLEVBQUpBLFVBUFk7QUFRWkMsRUFBQUEsT0FBTyxFQUFQQSxnQkFSWTtBQVNaQyxFQUFBQSxNQUFNLEVBQUVDLHNCQVRJO0FBVVpDLEVBQUFBLEtBQUssRUFBRSxJQUFJQyxvQkFBSixDQUFnQkYsc0JBQWhCO0FBVkssQ0FBZDtBQWFPLE1BQU1HLFlBQVksR0FBRyxJQUFJQywrQkFBSixDQUEyQjtBQUNyREMsRUFBQUEsSUFBSSxFQUFFLGNBRCtDO0FBRXJEQyxFQUFBQSxNQUFNLEVBQUUsMEJBQVViLHVCQUFWO0FBRjZDLENBQTNCLENBQXJCOzs7QUFPQSxTQUFTYyxJQUFULENBQWM7QUFBRUEsRUFBQUE7QUFBRixDQUFkLEVBQXdDO0FBQzdDLFNBQU9wQixLQUFLLENBQUNvQixJQUFELENBQVo7QUFDRDs7QUFFTSxTQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQztBQUMvQyxRQUFNO0FBQUVGLElBQUFBO0FBQUYsTUFBV0UsS0FBakI7O0FBQ0EsTUFBSUYsSUFBSSxJQUFJLFFBQVosRUFBc0I7QUFDcEIsV0FBT2xCLHNCQUFQO0FBQ0Q7O0FBQ0QsTUFBSWtCLElBQUksSUFBSSxRQUFaLEVBQXNCO0FBQ3BCLFdBQU9HLHdCQUFQO0FBQ0Q7O0FBQ0QsTUFBSUgsSUFBSSxJQUFJLFNBQVosRUFBdUI7QUFDckIsV0FBT2QsdUJBQVA7QUFDRDs7QUFDRCxNQUFJYyxJQUFJLElBQUksVUFBWixFQUF3QjtBQUN0QixXQUFPSSx1QkFBUDtBQUNEOztBQUNELE1BQUlKLElBQUksSUFBSSxNQUFaLEVBQW9CO0FBQ2xCLFdBQU9LLGVBQVA7QUFDRCxHQUZELE1BRU8sSUFBSUwsSUFBSSxJQUFJLEtBQVosRUFBbUI7QUFDeEIsV0FBT00sYUFBUDtBQUNELEdBRk0sTUFFQSxJQUFJTixJQUFJLElBQUksTUFBWixFQUFvQjtBQUN6QixXQUFPVixVQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlVLElBQUksSUFBSSxTQUFaLEVBQXVCO0FBQzVCLFdBQU8sMkJBQWFFLEtBQWIsQ0FBUDtBQUNELEdBRk0sTUFFQSxJQUFJRixJQUFJLEtBQUssT0FBYixFQUFzQjtBQUMzQixXQUFPLElBQUlMLG9CQUFKLENBQWdCRixzQkFBaEIsQ0FBUDtBQUNELEdBRk0sTUFFQSxJQUFJTyxJQUFJLEtBQUssUUFBYixFQUF1QjtBQUM1QixXQUFPUCxzQkFBUDtBQUNEO0FBQ0Y7O0FBRU0sU0FBU2MsU0FBVCxDQUFtQkwsS0FBbkIsRUFBMEM7QUFDL0MsUUFBTTtBQUFFRixJQUFBQTtBQUFGLE1BQVdFLEtBQWpCOztBQUNBLE1BQUlGLElBQUksSUFBSSxRQUFaLEVBQXNCO0FBQ3BCLFdBQU9RLHdCQUFQO0FBQ0Q7O0FBQ0QsTUFBSVIsSUFBSSxJQUFJLFFBQVosRUFBc0I7QUFDcEIsV0FBT1Msd0JBQVA7QUFDRDs7QUFDRCxNQUFJVCxJQUFJLElBQUksU0FBWixFQUF1QjtBQUNyQixXQUFPSixZQUFQO0FBQ0Q7O0FBQ0QsTUFBSUksSUFBSSxJQUFJLFVBQVosRUFBd0I7QUFDdEIsV0FBT1UsdUJBQVA7QUFDRDs7QUFDRCxNQUFJVixJQUFJLElBQUksTUFBWixFQUFvQjtBQUNsQjtBQUNBO0FBQ0QsR0FIRCxNQUdPLElBQUlBLElBQUksSUFBSSxLQUFaLEVBQW1CO0FBQ3hCO0FBQ0E7QUFDRCxHQUhNLE1BR0EsSUFBSUEsSUFBSSxJQUFJLE1BQVosRUFBb0I7QUFDekIsV0FBT1csZUFBUDtBQUNELEdBRk0sTUFFQSxJQUFJWCxJQUFJLElBQUksU0FBWixFQUF1QjtBQUM1QixXQUFPLDJCQUFhRSxLQUFiLENBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSUYsSUFBSSxJQUFJLE9BQVosRUFBcUI7QUFDMUIsV0FBT1ksaUJBQVA7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgR3JhcGhRTFN0cmluZyxcbiAgR3JhcGhRTEZsb2F0LFxuICBHcmFwaFFMQm9vbGVhbixcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsXG4gIC8vIEBmbG93LWRpc2FibGUtbmV4dFxufSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgQUNMLCBBQ0xJbnB1dCB9IGZyb20gJy4vQUNMJztcblxuaW1wb3J0IHsgR2VvUG9pbnQsIEdlb1BvaW50SW5wdXQsIEdlb1BvaW50UXVlcnkgfSBmcm9tICcuL0dlb1BvaW50JztcblxuaW1wb3J0IHsgRmlsZSwgRmlsZUlucHV0IH0gZnJvbSAnLi9GaWxlJztcblxuaW1wb3J0IHsgRGF0ZSwgRGF0ZVF1ZXJ5IH0gZnJvbSAnLi9EYXRlJztcblxuaW1wb3J0IHsgUG9pbnRlciwgUG9pbnRlcklucHV0LCBQb2ludGVyUXVlcnkgfSBmcm9tICcuL1BvaW50ZXInO1xuXG5pbXBvcnQgeyBKU09OT2JqZWN0IH0gZnJvbSAnLi9KU09OT2JqZWN0JztcblxuaW1wb3J0IHsgU3RyaW5nUXVlcnkgfSBmcm9tICcuL1N0cmluZ1F1ZXJ5JztcblxuaW1wb3J0IHsgTnVtYmVyUXVlcnkgfSBmcm9tICcuL051bWJlclF1ZXJ5JztcblxuaW1wb3J0IHsgTnVtYmVySW5wdXQgfSBmcm9tICcuL051bWJlcklucHV0JztcblxuaW1wb3J0IHsgUGFnZUluZm8gfSBmcm9tICcuL1BhZ2VJbmZvJztcblxuaW1wb3J0IHsgQXJyYXlRdWVyeSB9IGZyb20gJy4vQXJyYXknO1xuXG5pbXBvcnQgeyBCYXNlUXVlcnkgfSBmcm9tICcuL0Jhc2VRdWVyeSc7XG5cbmV4cG9ydCB7XG4gIEFDTCxcbiAgQUNMSW5wdXQsXG4gIEdlb1BvaW50LFxuICBHZW9Qb2ludElucHV0LFxuICBGaWxlLFxuICBGaWxlSW5wdXQsXG4gIERhdGUsXG4gIFBvaW50ZXIsXG4gIEpTT05PYmplY3QsXG4gIFBhZ2VJbmZvLFxufTtcblxuY29uc3QgdHlwZXMgPSB7XG4gIFN0cmluZzogR3JhcGhRTFN0cmluZyxcbiAgTnVtYmVyOiBHcmFwaFFMRmxvYXQsXG4gIEJvb2xlYW46IEdyYXBoUUxCb29sZWFuLFxuICBHZW9Qb2ludCxcbiAgRmlsZSxcbiAgQUNMLFxuICBEYXRlLFxuICBQb2ludGVyLFxuICBPYmplY3Q6IEpTT05PYmplY3QsXG4gIEFycmF5OiBuZXcgR3JhcGhRTExpc3QoSlNPTk9iamVjdCksXG59O1xuXG5leHBvcnQgY29uc3QgQm9vbGVhblF1ZXJ5ID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICBuYW1lOiAnQm9vbGVhblF1ZXJ5JyxcbiAgZmllbGRzOiBCYXNlUXVlcnkoR3JhcGhRTEJvb2xlYW4pLFxufSk7XG5cbnR5cGUgUGFyc2VGaWVsZFR5cGUgPSB7IHR5cGU6IHN0cmluZyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gdHlwZSh7IHR5cGUgfTogUGFyc2VGaWVsZFR5cGUpIHtcbiAgcmV0dXJuIHR5cGVzW3R5cGVdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5wdXRUeXBlKGZpZWxkOiBQYXJzZUZpZWxkVHlwZSkge1xuICBjb25zdCB7IHR5cGUgfSA9IGZpZWxkO1xuICBpZiAodHlwZSA9PSAnU3RyaW5nJykge1xuICAgIHJldHVybiBHcmFwaFFMU3RyaW5nO1xuICB9XG4gIGlmICh0eXBlID09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIE51bWJlcklucHV0O1xuICB9XG4gIGlmICh0eXBlID09ICdCb29sZWFuJykge1xuICAgIHJldHVybiBHcmFwaFFMQm9vbGVhbjtcbiAgfVxuICBpZiAodHlwZSA9PSAnR2VvUG9pbnQnKSB7XG4gICAgcmV0dXJuIEdlb1BvaW50SW5wdXQ7XG4gIH1cbiAgaWYgKHR5cGUgPT0gJ0ZpbGUnKSB7XG4gICAgcmV0dXJuIEZpbGVJbnB1dDtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdBQ0wnKSB7XG4gICAgcmV0dXJuIEFDTElucHV0O1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ0RhdGUnKSB7XG4gICAgcmV0dXJuIERhdGU7XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnUG9pbnRlcicpIHtcbiAgICByZXR1cm4gUG9pbnRlcklucHV0KGZpZWxkKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnQXJyYXknKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChKU09OT2JqZWN0KTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnT2JqZWN0Jykge1xuICAgIHJldHVybiBKU09OT2JqZWN0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeVR5cGUoZmllbGQ6IFBhcnNlRmllbGRUeXBlKSB7XG4gIGNvbnN0IHsgdHlwZSB9ID0gZmllbGQ7XG4gIGlmICh0eXBlID09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIFN0cmluZ1F1ZXJ5O1xuICB9XG4gIGlmICh0eXBlID09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIE51bWJlclF1ZXJ5O1xuICB9XG4gIGlmICh0eXBlID09ICdCb29sZWFuJykge1xuICAgIHJldHVybiBCb29sZWFuUXVlcnk7XG4gIH1cbiAgaWYgKHR5cGUgPT0gJ0dlb1BvaW50Jykge1xuICAgIHJldHVybiBHZW9Qb2ludFF1ZXJ5O1xuICB9XG4gIGlmICh0eXBlID09ICdGaWxlJykge1xuICAgIC8vIENhbm5vdCBxdWVyeSBvbiBmaWxlc1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICh0eXBlID09ICdBQ0wnKSB7XG4gICAgLy8gY2Fubm90IHF1ZXJ5IG9uIEFDTCFcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnRGF0ZScpIHtcbiAgICByZXR1cm4gRGF0ZVF1ZXJ5O1xuICB9IGVsc2UgaWYgKHR5cGUgPT0gJ1BvaW50ZXInKSB7XG4gICAgcmV0dXJuIFBvaW50ZXJRdWVyeShmaWVsZCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PSAnQXJyYXknKSB7XG4gICAgcmV0dXJuIEFycmF5UXVlcnk7XG4gIH1cbn1cbiJdfQ==