"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toParseACL = toParseACL;
exports.toGraphQLACL = toGraphQLACL;
exports.ACLInput = exports.ACL = void 0;

var _graphql = require("graphql");

const aclFields = {
  read: {
    type: new _graphql.GraphQLList(_graphql.GraphQLString),
    description: 'list of allowed users, roles for read'
  },
  write: {
    type: new _graphql.GraphQLList(_graphql.GraphQLString),
    description: 'list of allowed users, roles for write'
  }
};
const ACL = new _graphql.GraphQLObjectType({
  name: 'ACL',
  fields: aclFields
});
exports.ACL = ACL;
const ACLInput = new _graphql.GraphQLInputObjectType({
  name: 'ACLInput',
  fields: aclFields
});
exports.ACLInput = ACLInput;

function toParseACL(graphqlACL) {
  const {
    read,
    write
  } = graphqlACL;
  let ACL = {};

  const reducer = perm => {
    return (memo, key) => {
      memo[key] = memo[key] || {};
      memo[key][perm] = true;
      return memo;
    };
  };

  if (read) {
    ACL = read.reduce(reducer('read'), ACL);
  }

  if (write) {
    ACL = write.reduce(reducer('write'), ACL);
  }

  return ACL;
}

function toGraphQLACL(parseACL) {
  return Object.keys(parseACL).reduce((memo, id) => {
    const perm = parseACL[id];

    if (perm.read) {
      memo.read = memo.read || [];
      memo.read.push(id);
    }

    if (perm.write) {
      memo.write = memo.write || [];
      memo.write.push(id);
    }

    return memo;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3R5cGVzL0FDTC5qcyJdLCJuYW1lcyI6WyJhY2xGaWVsZHMiLCJyZWFkIiwidHlwZSIsIkdyYXBoUUxMaXN0IiwiR3JhcGhRTFN0cmluZyIsImRlc2NyaXB0aW9uIiwid3JpdGUiLCJBQ0wiLCJHcmFwaFFMT2JqZWN0VHlwZSIsIm5hbWUiLCJmaWVsZHMiLCJBQ0xJbnB1dCIsIkdyYXBoUUxJbnB1dE9iamVjdFR5cGUiLCJ0b1BhcnNlQUNMIiwiZ3JhcGhxbEFDTCIsInJlZHVjZXIiLCJwZXJtIiwibWVtbyIsImtleSIsInJlZHVjZSIsInRvR3JhcGhRTEFDTCIsInBhcnNlQUNMIiwiT2JqZWN0Iiwia2V5cyIsImlkIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBT0EsTUFBTUEsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsSUFBSSxFQUFFLElBQUlDLG9CQUFKLENBQWdCQyxzQkFBaEIsQ0FERjtBQUVKQyxJQUFBQSxXQUFXLEVBQUU7QUFGVCxHQURVO0FBS2hCQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEosSUFBQUEsSUFBSSxFQUFFLElBQUlDLG9CQUFKLENBQWdCQyxzQkFBaEIsQ0FERDtBQUVMQyxJQUFBQSxXQUFXLEVBQUU7QUFGUjtBQUxTLENBQWxCO0FBV08sTUFBTUUsR0FBRyxHQUFHLElBQUlDLDBCQUFKLENBQXNCO0FBQ3ZDQyxFQUFBQSxJQUFJLEVBQUUsS0FEaUM7QUFFdkNDLEVBQUFBLE1BQU0sRUFBRVY7QUFGK0IsQ0FBdEIsQ0FBWjs7QUFLQSxNQUFNVyxRQUFRLEdBQUcsSUFBSUMsK0JBQUosQ0FBMkI7QUFDakRILEVBQUFBLElBQUksRUFBRSxVQUQyQztBQUVqREMsRUFBQUEsTUFBTSxFQUFFVjtBQUZ5QyxDQUEzQixDQUFqQjs7O0FBS0EsU0FBU2EsVUFBVCxDQUFvQkMsVUFBcEIsRUFBZ0M7QUFDckMsUUFBTTtBQUFFYixJQUFBQSxJQUFGO0FBQVFLLElBQUFBO0FBQVIsTUFBa0JRLFVBQXhCO0FBQ0EsTUFBSVAsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsUUFBTVEsT0FBTyxHQUFHQyxJQUFJLElBQUk7QUFDdEIsV0FBTyxDQUFDQyxJQUFELEVBQU9DLEdBQVAsS0FBZTtBQUNwQkQsTUFBQUEsSUFBSSxDQUFDQyxHQUFELENBQUosR0FBWUQsSUFBSSxDQUFDQyxHQUFELENBQUosSUFBYSxFQUF6QjtBQUNBRCxNQUFBQSxJQUFJLENBQUNDLEdBQUQsQ0FBSixDQUFVRixJQUFWLElBQWtCLElBQWxCO0FBQ0EsYUFBT0MsSUFBUDtBQUNELEtBSkQ7QUFLRCxHQU5EOztBQU9BLE1BQUloQixJQUFKLEVBQVU7QUFDUk0sSUFBQUEsR0FBRyxHQUFHTixJQUFJLENBQUNrQixNQUFMLENBQVlKLE9BQU8sQ0FBQyxNQUFELENBQW5CLEVBQTZCUixHQUE3QixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSUQsS0FBSixFQUFXO0FBQ1RDLElBQUFBLEdBQUcsR0FBR0QsS0FBSyxDQUFDYSxNQUFOLENBQWFKLE9BQU8sQ0FBQyxPQUFELENBQXBCLEVBQStCUixHQUEvQixDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0EsR0FBUDtBQUNEOztBQUVNLFNBQVNhLFlBQVQsQ0FBc0JDLFFBQXRCLEVBQWdDO0FBQ3JDLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixRQUFaLEVBQXNCRixNQUF0QixDQUE2QixDQUFDRixJQUFELEVBQU9PLEVBQVAsS0FBYztBQUNoRCxVQUFNUixJQUFJLEdBQUdLLFFBQVEsQ0FBQ0csRUFBRCxDQUFyQjs7QUFDQSxRQUFJUixJQUFJLENBQUNmLElBQVQsRUFBZTtBQUNiZ0IsTUFBQUEsSUFBSSxDQUFDaEIsSUFBTCxHQUFZZ0IsSUFBSSxDQUFDaEIsSUFBTCxJQUFhLEVBQXpCO0FBQ0FnQixNQUFBQSxJQUFJLENBQUNoQixJQUFMLENBQVV3QixJQUFWLENBQWVELEVBQWY7QUFDRDs7QUFDRCxRQUFJUixJQUFJLENBQUNWLEtBQVQsRUFBZ0I7QUFDZFcsTUFBQUEsSUFBSSxDQUFDWCxLQUFMLEdBQWFXLElBQUksQ0FBQ1gsS0FBTCxJQUFjLEVBQTNCO0FBQ0FXLE1BQUFBLElBQUksQ0FBQ1gsS0FBTCxDQUFXbUIsSUFBWCxDQUFnQkQsRUFBaEI7QUFDRDs7QUFDRCxXQUFPUCxJQUFQO0FBQ0QsR0FYTSxFQVdKLEVBWEksQ0FBUDtBQVlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTExpc3QsXG4gIEdyYXBoUUxTdHJpbmcsXG4gIEdyYXBoUUxPYmplY3RUeXBlLFxuICBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLFxufSBmcm9tICdncmFwaHFsJztcblxuY29uc3QgYWNsRmllbGRzID0ge1xuICByZWFkOiB7XG4gICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxTdHJpbmcpLFxuICAgIGRlc2NyaXB0aW9uOiAnbGlzdCBvZiBhbGxvd2VkIHVzZXJzLCByb2xlcyBmb3IgcmVhZCcsXG4gIH0sXG4gIHdyaXRlOiB7XG4gICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KEdyYXBoUUxTdHJpbmcpLFxuICAgIGRlc2NyaXB0aW9uOiAnbGlzdCBvZiBhbGxvd2VkIHVzZXJzLCByb2xlcyBmb3Igd3JpdGUnLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IEFDTCA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdBQ0wnLFxuICBmaWVsZHM6IGFjbEZpZWxkcyxcbn0pO1xuXG5leHBvcnQgY29uc3QgQUNMSW5wdXQgPSBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdBQ0xJbnB1dCcsXG4gIGZpZWxkczogYWNsRmllbGRzLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1BhcnNlQUNMKGdyYXBocWxBQ0wpIHtcbiAgY29uc3QgeyByZWFkLCB3cml0ZSB9ID0gZ3JhcGhxbEFDTDtcbiAgbGV0IEFDTCA9IHt9O1xuICBjb25zdCByZWR1Y2VyID0gcGVybSA9PiB7XG4gICAgcmV0dXJuIChtZW1vLCBrZXkpID0+IHtcbiAgICAgIG1lbW9ba2V5XSA9IG1lbW9ba2V5XSB8fCB7fTtcbiAgICAgIG1lbW9ba2V5XVtwZXJtXSA9IHRydWU7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuICB9O1xuICBpZiAocmVhZCkge1xuICAgIEFDTCA9IHJlYWQucmVkdWNlKHJlZHVjZXIoJ3JlYWQnKSwgQUNMKTtcbiAgfVxuICBpZiAod3JpdGUpIHtcbiAgICBBQ0wgPSB3cml0ZS5yZWR1Y2UocmVkdWNlcignd3JpdGUnKSwgQUNMKTtcbiAgfVxuICByZXR1cm4gQUNMO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9HcmFwaFFMQUNMKHBhcnNlQUNMKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwYXJzZUFDTCkucmVkdWNlKChtZW1vLCBpZCkgPT4ge1xuICAgIGNvbnN0IHBlcm0gPSBwYXJzZUFDTFtpZF07XG4gICAgaWYgKHBlcm0ucmVhZCkge1xuICAgICAgbWVtby5yZWFkID0gbWVtby5yZWFkIHx8IFtdO1xuICAgICAgbWVtby5yZWFkLnB1c2goaWQpO1xuICAgIH1cbiAgICBpZiAocGVybS53cml0ZSkge1xuICAgICAgbWVtby53cml0ZSA9IG1lbW8ud3JpdGUgfHwgW107XG4gICAgICBtZW1vLndyaXRlLnB1c2goaWQpO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xufVxuIl19