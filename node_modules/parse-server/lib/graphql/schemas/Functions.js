"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _triggers = require("../../triggers");

var _FunctionsRouter = require("../../Routers/FunctionsRouter");

var _graphql = require("graphql");

var _execute = require("../execute");

function getFunctions() {
  const functions = (0, _triggers.getAllFunctions)();
  const fields = {};
  Object.keys(functions).forEach(name => {
    const options = functions[name].options || {};
    let type = _graphql.GraphQLBoolean;
    let inputType;
    let useDefaultType = true;

    if (options && options.type) {
      type = options.type;
      useDefaultType = false;
    }

    if (options && options.inputType) {
      inputType = options.inputType;
    }

    let args;

    if (inputType) {
      args = {
        input: {
          type: inputType
        }
      };
    }

    const description = options.description || 'Calling this mutation will run the cloud function';
    fields[name] = {
      type,
      description,
      args,
      resolve: async (root, args, req) => {
        const results = await _FunctionsRouter.FunctionsRouter.runFunction(name, args.input, req);
        const result = results.response.result;
        injectIdsInResults(result);

        if (useDefaultType) {
          return true;
        }

        return result;
      }
    };
  });
  return fields;
}

function injectIdsInResults(result) {
  if (Array.isArray(result)) {
    result.forEach(injectIdsInResults);
  } else if (typeof result === 'object') {
    if (result.objectId && result.className) {
      result.id = (0, _execute.getGloballyUniqueId)(result.className, result.objectId);
    }

    Object.keys(result).forEach(key => {
      injectIdsInResults(result[key]);
    });
  }
}

var _default = {
  Mutation: getFunctions
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3NjaGVtYXMvRnVuY3Rpb25zLmpzIl0sIm5hbWVzIjpbImdldEZ1bmN0aW9ucyIsImZ1bmN0aW9ucyIsImZpZWxkcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibmFtZSIsIm9wdGlvbnMiLCJ0eXBlIiwiR3JhcGhRTEJvb2xlYW4iLCJpbnB1dFR5cGUiLCJ1c2VEZWZhdWx0VHlwZSIsImFyZ3MiLCJpbnB1dCIsImRlc2NyaXB0aW9uIiwicmVzb2x2ZSIsInJvb3QiLCJyZXEiLCJyZXN1bHRzIiwiRnVuY3Rpb25zUm91dGVyIiwicnVuRnVuY3Rpb24iLCJyZXN1bHQiLCJyZXNwb25zZSIsImluamVjdElkc0luUmVzdWx0cyIsIkFycmF5IiwiaXNBcnJheSIsIm9iamVjdElkIiwiY2xhc3NOYW1lIiwiaWQiLCJrZXkiLCJNdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLFNBQVNBLFlBQVQsR0FBd0I7QUFDdEIsUUFBTUMsU0FBUyxHQUFHLGdDQUFsQjtBQUNBLFFBQU1DLE1BQU0sR0FBRyxFQUFmO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxTQUFaLEVBQXVCSSxPQUF2QixDQUErQkMsSUFBSSxJQUFJO0FBQ3JDLFVBQU1DLE9BQU8sR0FBR04sU0FBUyxDQUFDSyxJQUFELENBQVQsQ0FBZ0JDLE9BQWhCLElBQTJCLEVBQTNDO0FBQ0EsUUFBSUMsSUFBSSxHQUFHQyx1QkFBWDtBQUNBLFFBQUlDLFNBQUo7QUFDQSxRQUFJQyxjQUFjLEdBQUcsSUFBckI7O0FBQ0EsUUFBSUosT0FBTyxJQUFJQSxPQUFPLENBQUNDLElBQXZCLEVBQTZCO0FBQzNCQSxNQUFBQSxJQUFJLEdBQUdELE9BQU8sQ0FBQ0MsSUFBZjtBQUNBRyxNQUFBQSxjQUFjLEdBQUcsS0FBakI7QUFDRDs7QUFFRCxRQUFJSixPQUFPLElBQUlBLE9BQU8sQ0FBQ0csU0FBdkIsRUFBa0M7QUFDaENBLE1BQUFBLFNBQVMsR0FBR0gsT0FBTyxDQUFDRyxTQUFwQjtBQUNEOztBQUNELFFBQUlFLElBQUo7O0FBQ0EsUUFBSUYsU0FBSixFQUFlO0FBQ2JFLE1BQUFBLElBQUksR0FBRztBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBRUwsVUFBQUEsSUFBSSxFQUFFRTtBQUFSO0FBQVQsT0FBUDtBQUNEOztBQUNELFVBQU1JLFdBQVcsR0FDZlAsT0FBTyxDQUFDTyxXQUFSLElBQ0EsbURBRkY7QUFHQVosSUFBQUEsTUFBTSxDQUFDSSxJQUFELENBQU4sR0FBZTtBQUNiRSxNQUFBQSxJQURhO0FBRWJNLE1BQUFBLFdBRmE7QUFHYkYsTUFBQUEsSUFIYTtBQUliRyxNQUFBQSxPQUFPLEVBQUUsT0FBT0MsSUFBUCxFQUFhSixJQUFiLEVBQW1CSyxHQUFuQixLQUEyQjtBQUNsQyxjQUFNQyxPQUFPLEdBQUcsTUFBTUMsaUNBQWdCQyxXQUFoQixDQUNwQmQsSUFEb0IsRUFFcEJNLElBQUksQ0FBQ0MsS0FGZSxFQUdwQkksR0FIb0IsQ0FBdEI7QUFLQSxjQUFNSSxNQUFNLEdBQUdILE9BQU8sQ0FBQ0ksUUFBUixDQUFpQkQsTUFBaEM7QUFDQUUsUUFBQUEsa0JBQWtCLENBQUNGLE1BQUQsQ0FBbEI7O0FBQ0EsWUFBSVYsY0FBSixFQUFvQjtBQUNsQixpQkFBTyxJQUFQO0FBQ0Q7O0FBQ0QsZUFBT1UsTUFBUDtBQUNEO0FBaEJZLEtBQWY7QUFrQkQsR0F0Q0Q7QUF1Q0EsU0FBT25CLE1BQVA7QUFDRDs7QUFFRCxTQUFTcUIsa0JBQVQsQ0FBNEJGLE1BQTVCLEVBQW9DO0FBQ2xDLE1BQUlHLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixNQUFkLENBQUosRUFBMkI7QUFDekJBLElBQUFBLE1BQU0sQ0FBQ2hCLE9BQVAsQ0FBZWtCLGtCQUFmO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBT0YsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUNyQyxRQUFJQSxNQUFNLENBQUNLLFFBQVAsSUFBbUJMLE1BQU0sQ0FBQ00sU0FBOUIsRUFBeUM7QUFDdkNOLE1BQUFBLE1BQU0sQ0FBQ08sRUFBUCxHQUFZLGtDQUFvQlAsTUFBTSxDQUFDTSxTQUEzQixFQUFzQ04sTUFBTSxDQUFDSyxRQUE3QyxDQUFaO0FBQ0Q7O0FBQ0R2QixJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWWlCLE1BQVosRUFBb0JoQixPQUFwQixDQUE0QndCLEdBQUcsSUFBSTtBQUNqQ04sTUFBQUEsa0JBQWtCLENBQUNGLE1BQU0sQ0FBQ1EsR0FBRCxDQUFQLENBQWxCO0FBQ0QsS0FGRDtBQUdEO0FBQ0Y7O2VBRWM7QUFDYkMsRUFBQUEsUUFBUSxFQUFFOUI7QUFERyxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWxsRnVuY3Rpb25zIH0gZnJvbSAnLi4vLi4vdHJpZ2dlcnMnO1xuaW1wb3J0IHsgRnVuY3Rpb25zUm91dGVyIH0gZnJvbSAnLi4vLi4vUm91dGVycy9GdW5jdGlvbnNSb3V0ZXInO1xuaW1wb3J0IHsgR3JhcGhRTEJvb2xlYW4gfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGdldEdsb2JhbGx5VW5pcXVlSWQgfSBmcm9tICcuLi9leGVjdXRlJztcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25zKCkge1xuICBjb25zdCBmdW5jdGlvbnMgPSBnZXRBbGxGdW5jdGlvbnMoKTtcbiAgY29uc3QgZmllbGRzID0ge307XG4gIE9iamVjdC5rZXlzKGZ1bmN0aW9ucykuZm9yRWFjaChuYW1lID0+IHtcbiAgICBjb25zdCBvcHRpb25zID0gZnVuY3Rpb25zW25hbWVdLm9wdGlvbnMgfHwge307XG4gICAgbGV0IHR5cGUgPSBHcmFwaFFMQm9vbGVhbjtcbiAgICBsZXQgaW5wdXRUeXBlO1xuICAgIGxldCB1c2VEZWZhdWx0VHlwZSA9IHRydWU7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlKSB7XG4gICAgICB0eXBlID0gb3B0aW9ucy50eXBlO1xuICAgICAgdXNlRGVmYXVsdFR5cGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmlucHV0VHlwZSkge1xuICAgICAgaW5wdXRUeXBlID0gb3B0aW9ucy5pbnB1dFR5cGU7XG4gICAgfVxuICAgIGxldCBhcmdzO1xuICAgIGlmIChpbnB1dFR5cGUpIHtcbiAgICAgIGFyZ3MgPSB7IGlucHV0OiB7IHR5cGU6IGlucHV0VHlwZSB9IH07XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID1cbiAgICAgIG9wdGlvbnMuZGVzY3JpcHRpb24gfHxcbiAgICAgICdDYWxsaW5nIHRoaXMgbXV0YXRpb24gd2lsbCBydW4gdGhlIGNsb3VkIGZ1bmN0aW9uJztcbiAgICBmaWVsZHNbbmFtZV0gPSB7XG4gICAgICB0eXBlLFxuICAgICAgZGVzY3JpcHRpb24sXG4gICAgICBhcmdzLFxuICAgICAgcmVzb2x2ZTogYXN5bmMgKHJvb3QsIGFyZ3MsIHJlcSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgRnVuY3Rpb25zUm91dGVyLnJ1bkZ1bmN0aW9uKFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgYXJncy5pbnB1dCxcbiAgICAgICAgICByZXFcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0cy5yZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgIGluamVjdElkc0luUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICBpZiAodXNlRGVmYXVsdFR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIGZpZWxkcztcbn1cblxuZnVuY3Rpb24gaW5qZWN0SWRzSW5SZXN1bHRzKHJlc3VsdCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgcmVzdWx0LmZvckVhY2goaW5qZWN0SWRzSW5SZXN1bHRzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChyZXN1bHQub2JqZWN0SWQgJiYgcmVzdWx0LmNsYXNzTmFtZSkge1xuICAgICAgcmVzdWx0LmlkID0gZ2V0R2xvYmFsbHlVbmlxdWVJZChyZXN1bHQuY2xhc3NOYW1lLCByZXN1bHQub2JqZWN0SWQpO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGluamVjdElkc0luUmVzdWx0cyhyZXN1bHRba2V5XSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBNdXRhdGlvbjogZ2V0RnVuY3Rpb25zLFxufTtcbiJdfQ==