'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUserAuthMutationFields = getUserAuthMutationFields;

var _graphql = require('graphql');

var _execute = require('./execute');

var _UserAuthentication = require('../Controllers/UserAuthentication');

var _ParseClass = require('./ParseClass');

const LoginCompletePayload = new _graphql.GraphQLObjectType({
  name: 'LoginCompletePayload',
  fields: () => {
    const { parseClass } = (0, _ParseClass.loadClass)('_User');
    const fields = parseClass.graphQLConfig().fields;
    return Object.assign({}, fields(), {
      sessionToken: { type: (0, _graphql.GraphQLNonNull)(_graphql.GraphQLString) }
    });
  }
});

const LoginInput = new _graphql.GraphQLInputObjectType({
  name: 'LoginInput',
  fields: {
    email: { type: _graphql.GraphQLString, description: 'the email of the user. Either email or username should be provided' },
    username: { type: _graphql.GraphQLString, description: 'the username of the user. Either email or username should be provided' },
    password: { type: (0, _graphql.GraphQLNonNull)(_graphql.GraphQLString) }
  }
});

const login = {
  type: LoginCompletePayload,
  args: {
    input: { type: LoginInput }
  },
  resolve: async (root, args, req) => {
    const user = await (0, _UserAuthentication.logIn)(args.input, req.config, req.auth, req.info && req.info.installationId);
    return (0, _execute.transformResult)('_User', user);
  }
};

function getUserAuthMutationFields() {
  return {
    login
  };
}

exports.default = {
  Query: () => ({}),
  Mutation: getUserAuthMutationFields
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaHFsL1VzZXJBdXRoLmpzIl0sIm5hbWVzIjpbImdldFVzZXJBdXRoTXV0YXRpb25GaWVsZHMiLCJMb2dpbkNvbXBsZXRlUGF5bG9hZCIsIkdyYXBoUUxPYmplY3RUeXBlIiwibmFtZSIsImZpZWxkcyIsInBhcnNlQ2xhc3MiLCJncmFwaFFMQ29uZmlnIiwiT2JqZWN0IiwiYXNzaWduIiwic2Vzc2lvblRva2VuIiwidHlwZSIsIkdyYXBoUUxTdHJpbmciLCJMb2dpbklucHV0IiwiR3JhcGhRTElucHV0T2JqZWN0VHlwZSIsImVtYWlsIiwiZGVzY3JpcHRpb24iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibG9naW4iLCJhcmdzIiwiaW5wdXQiLCJyZXNvbHZlIiwicm9vdCIsInJlcSIsInVzZXIiLCJjb25maWciLCJhdXRoIiwiaW5mbyIsImluc3RhbGxhdGlvbklkIiwiUXVlcnkiLCJNdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE2Q2dCQSx5QixHQUFBQSx5Qjs7QUE3Q2hCOztBQU9BOztBQUlBOztBQUNBOztBQUVBLE1BQU1DLHVCQUF1QixJQUFJQywwQkFBSixDQUFzQjtBQUNqREMsUUFBTSxzQkFEMkM7QUFFakRDLFVBQVEsTUFBTTtBQUNaLFVBQU0sRUFBRUMsVUFBRixLQUFpQiwyQkFBVSxPQUFWLENBQXZCO0FBQ0EsVUFBTUQsU0FBU0MsV0FBV0MsYUFBWCxHQUEyQkYsTUFBMUM7QUFDQSxXQUFPRyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosUUFBbEIsRUFBNEI7QUFDakNLLG9CQUFjLEVBQUVDLE1BQU0sNkJBQWVDLHNCQUFmLENBQVI7QUFEbUIsS0FBNUIsQ0FBUDtBQUdEO0FBUmdELENBQXRCLENBQTdCOztBQVdBLE1BQU1DLGFBQWEsSUFBSUMsK0JBQUosQ0FBMkI7QUFDNUNWLFFBQU0sWUFEc0M7QUFFNUNDLFVBQVE7QUFDTlUsV0FBTyxFQUFFSixNQUFNQyxzQkFBUixFQUF1QkksYUFBYSxvRUFBcEMsRUFERDtBQUVOQyxjQUFVLEVBQUVOLE1BQU1DLHNCQUFSLEVBQXVCSSxhQUFhLHVFQUFwQyxFQUZKO0FBR05FLGNBQVUsRUFBRVAsTUFBTSw2QkFBZUMsc0JBQWYsQ0FBUjtBQUhKO0FBRm9DLENBQTNCLENBQW5COztBQVNBLE1BQU1PLFFBQVE7QUFDWlIsUUFBTVQsb0JBRE07QUFFWmtCLFFBQU07QUFDSkMsV0FBTyxFQUFFVixNQUFNRSxVQUFSO0FBREgsR0FGTTtBQUtaUyxXQUFTLE9BQU9DLElBQVAsRUFBYUgsSUFBYixFQUFtQkksR0FBbkIsS0FBMkI7QUFDbEMsVUFBTUMsT0FBTyxNQUFNLCtCQUFNTCxLQUFLQyxLQUFYLEVBQWtCRyxJQUFJRSxNQUF0QixFQUE4QkYsSUFBSUcsSUFBbEMsRUFBd0NILElBQUlJLElBQUosSUFBWUosSUFBSUksSUFBSixDQUFTQyxjQUE3RCxDQUFuQjtBQUNBLFdBQU8sOEJBQWdCLE9BQWhCLEVBQXlCSixJQUF6QixDQUFQO0FBQ0Q7QUFSVyxDQUFkOztBQVdPLFNBQVN4Qix5QkFBVCxHQUFxQztBQUMxQyxTQUFPO0FBQ0xrQjtBQURLLEdBQVA7QUFHRDs7a0JBRWM7QUFDYlcsU0FBTyxPQUFPLEVBQVAsQ0FETTtBQUViQyxZQUFVOUI7QUFGRyxDIiwiZmlsZSI6IlVzZXJBdXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR3JhcGhRTE9iamVjdFR5cGUsXG4gIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsXG4gIEdyYXBoUUxOb25OdWxsLFxuICBHcmFwaFFMU3RyaW5nLFxufSBmcm9tICdncmFwaHFsJ1xuXG5pbXBvcnQge1xuICB0cmFuc2Zvcm1SZXN1bHRcbn0gZnJvbSAnLi9leGVjdXRlJztcblxuaW1wb3J0IHsgbG9nSW4gfSBmcm9tICcuLi9Db250cm9sbGVycy9Vc2VyQXV0aGVudGljYXRpb24nO1xuaW1wb3J0IHsgbG9hZENsYXNzIH0gZnJvbSAnLi9QYXJzZUNsYXNzJztcblxuY29uc3QgTG9naW5Db21wbGV0ZVBheWxvYWQgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnTG9naW5Db21wbGV0ZVBheWxvYWQnLFxuICBmaWVsZHM6ICgpID0+IHtcbiAgICBjb25zdCB7IHBhcnNlQ2xhc3MgfSA9IGxvYWRDbGFzcygnX1VzZXInKTtcbiAgICBjb25zdCBmaWVsZHMgPSBwYXJzZUNsYXNzLmdyYXBoUUxDb25maWcoKS5maWVsZHM7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGZpZWxkcygpLCB7XG4gICAgICBzZXNzaW9uVG9rZW46IHsgdHlwZTogR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZykgfVxuICAgIH0pO1xuICB9XG59KTtcblxuY29uc3QgTG9naW5JbnB1dCA9IG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKHtcbiAgbmFtZTogJ0xvZ2luSW5wdXQnLFxuICBmaWVsZHM6IHtcbiAgICBlbWFpbDogeyB0eXBlOiBHcmFwaFFMU3RyaW5nLCBkZXNjcmlwdGlvbjogJ3RoZSBlbWFpbCBvZiB0aGUgdXNlci4gRWl0aGVyIGVtYWlsIG9yIHVzZXJuYW1lIHNob3VsZCBiZSBwcm92aWRlZCcgfSxcbiAgICB1c2VybmFtZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nLCBkZXNjcmlwdGlvbjogJ3RoZSB1c2VybmFtZSBvZiB0aGUgdXNlci4gRWl0aGVyIGVtYWlsIG9yIHVzZXJuYW1lIHNob3VsZCBiZSBwcm92aWRlZCcgIH0sXG4gICAgcGFzc3dvcmQ6IHsgdHlwZTogR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZykgfVxuICB9XG59KTtcblxuY29uc3QgbG9naW4gPSB7XG4gIHR5cGU6IExvZ2luQ29tcGxldGVQYXlsb2FkLFxuICBhcmdzOiB7XG4gICAgaW5wdXQ6IHsgdHlwZTogTG9naW5JbnB1dCB9XG4gIH0sXG4gIHJlc29sdmU6IGFzeW5jIChyb290LCBhcmdzLCByZXEpID0+IHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgbG9nSW4oYXJncy5pbnB1dCwgcmVxLmNvbmZpZywgcmVxLmF1dGgsIHJlcS5pbmZvICYmIHJlcS5pbmZvLmluc3RhbGxhdGlvbklkKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtUmVzdWx0KCdfVXNlcicsIHVzZXIpO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckF1dGhNdXRhdGlvbkZpZWxkcygpIHtcbiAgcmV0dXJuIHtcbiAgICBsb2dpblxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFF1ZXJ5OiAoKSA9PiAoe30pLFxuICBNdXRhdGlvbjogZ2V0VXNlckF1dGhNdXRhdGlvbkZpZWxkcyxcbn1cbiJdfQ==