'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logIn = logIn;

var _password = require('../password');

var _password2 = _interopRequireDefault(_password);

var _AccountLockout = require('../AccountLockout');

var _AccountLockout2 = _interopRequireDefault(_AccountLockout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Parse = require('parse/node');
async function logIn({ username, password, email }, config, auth) {
  // TODO: use the right error codes / descriptions.
  if (!username && !email) {
    throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'username/email is required.');
  }
  if (!password) {
    throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'password is required.');
  }
  if (typeof password !== 'string' || email && typeof email !== 'string' || username && typeof username !== 'string') {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');
  }

  let user;
  let isValidPassword = false;
  let query;
  if (email && username) {
    query = { email, username };
  } else if (email) {
    query = { email };
  } else {
    query = { $or: [{ username }, { email: username }] };
  }
  const results = await config.database.find('_User', query);
  if (!results.length) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');
  }

  if (results.length > 1) {
    // corner case where user1 has username == user2 email
    config.loggerController.warn('There is a user which email is the same as another user\'s username, logging in based on username');
    user = results.filter(user => user.username === username)[0];
  } else {
    user = results[0];
  }

  isValidPassword = await _password2.default.compare(password, user.password);
  const accountLockoutPolicy = new _AccountLockout2.default(user, config);
  await accountLockoutPolicy.handleLoginAttempt(isValidPassword);
  if (!isValidPassword) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');
  }
  // Ensure the user isn't locked out
  // A locked out user won't be able to login
  // To lock a user out, just set the ACL to `masterKey` only  ({}).
  // Empty ACL is OK
  if (!auth.isMaster && user.ACL && Object.keys(user.ACL).length == 0) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Invalid username/password.');
  }
  if (config.verifyUserEmails && config.preventLoginWithUnverifiedEmail && !user.emailVerified) {
    throw new Parse.Error(Parse.Error.EMAIL_NOT_FOUND, 'User email is not verified.');
  }

  delete user.password;

  // Sometimes the authData still has null on that keys
  // https://github.com/parse-community/parse-server/issues/935
  if (user.authData) {
    Object.keys(user.authData).forEach(provider => {
      if (user.authData[provider] === null) {
        delete user.authData[provider];
      }
    });
    if (Object.keys(user.authData).length == 0) {
      delete user.authData;
    }
  }

  return user;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9Vc2VyU2Vzc2lvbi5qcyJdLCJuYW1lcyI6WyJsb2dJbiIsIlBhcnNlIiwicmVxdWlyZSIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJlbWFpbCIsImNvbmZpZyIsImF1dGgiLCJFcnJvciIsIlVTRVJOQU1FX01JU1NJTkciLCJQQVNTV09SRF9NSVNTSU5HIiwiT0JKRUNUX05PVF9GT1VORCIsInVzZXIiLCJpc1ZhbGlkUGFzc3dvcmQiLCJxdWVyeSIsIiRvciIsInJlc3VsdHMiLCJkYXRhYmFzZSIsImZpbmQiLCJsZW5ndGgiLCJsb2dnZXJDb250cm9sbGVyIiwid2FybiIsImZpbHRlciIsInBhc3N3b3JkQ3J5cHRvIiwiY29tcGFyZSIsImFjY291bnRMb2Nrb3V0UG9saWN5IiwiQWNjb3VudExvY2tvdXQiLCJoYW5kbGVMb2dpbkF0dGVtcHQiLCJpc01hc3RlciIsIkFDTCIsIk9iamVjdCIsImtleXMiLCJ2ZXJpZnlVc2VyRW1haWxzIiwicHJldmVudExvZ2luV2l0aFVudmVyaWZpZWRFbWFpbCIsImVtYWlsVmVyaWZpZWQiLCJFTUFJTF9OT1RfRk9VTkQiLCJhdXRoRGF0YSIsImZvckVhY2giLCJwcm92aWRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLc0JBLEssR0FBQUEsSzs7QUFKdEI7Ozs7QUFDQTs7Ozs7O0FBRkEsTUFBTUMsUUFBUUMsUUFBUSxZQUFSLENBQWQ7QUFLTyxlQUFlRixLQUFmLENBQXFCLEVBQUVHLFFBQUYsRUFBWUMsUUFBWixFQUFzQkMsS0FBdEIsRUFBckIsRUFBb0RDLE1BQXBELEVBQTREQyxJQUE1RCxFQUFrRTtBQUN2RTtBQUNBLE1BQUksQ0FBQ0osUUFBRCxJQUFhLENBQUNFLEtBQWxCLEVBQXlCO0FBQ3ZCLFVBQU0sSUFBSUosTUFBTU8sS0FBVixDQUFnQlAsTUFBTU8sS0FBTixDQUFZQyxnQkFBNUIsRUFBOEMsNkJBQTlDLENBQU47QUFDRDtBQUNELE1BQUksQ0FBQ0wsUUFBTCxFQUFl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UUFBZCxNQUE0QixJQUFoQyxFQUFzQztBQUNwQyxlQUFPMUIsS0FBS3dCLFFBQUwsQ0FBY0UsUUFBZCxDQUFQO0FBQ0Q7QUFDRixLQUpEO0FBS0EsUUFBSVIsT0FBT0MsSUFBUCxDQUFZbkIsS0FBS3dCLFFBQWpCLEVBQTJCakIsTUFBM0IsSUFBcUMsQ0FBekMsRUFBNEM7QUFDMUMsYUFBT1AsS0FBS3dCLFFBQVo7QUFDRDtBQUNGOztBQUVELFNBQU94QixJQUFQO0FBQ0QiLCJmaWxlIjoiVXNlclNlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKTtcbmltcG9ydCBwYXNzd29yZENyeXB0byBmcm9tICcuLi9wYXNzd29yZCc7XG5pbXBvcnQgQWNjb3VudExvY2tvdXQgZnJvbSAnLi4vQWNjb3VudExvY2tvdXQnO1xuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dJbih7IHVzZXJuYW1lLCBwYXNzd29yZCwgZW1haWwgfSwgY29uZmlnLCBhdXRoKSB7XG4gIC8vIFRPRE86IHVzZSB0aGUgcmlnaHQgZXJyb3IgY29kZXMgLyBkZXNjcmlwdGlvbnMuXG4gIGlmICghdXNlcm5hbWUgJiYgIWVtYWlsKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlVTRVJOQU1FX01JU1NJTkcsICd1c2VybmFtZS9lbWFpbCBpcyByZXF1aXJlZC4nKTtcbiAgfVxuICBpZiAoIXBhc3N3b3JkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlBBU1NXT1JEX01JU1NJTkcsICdwYXNzd29yZCBpcyByZXF1aXJlZC4nKTtcbiAgfVxuICBpZiAodHlwZW9mIHBhc3N3b3JkICE9PSAnc3RyaW5nJ1xuICAgIHx8IGVtYWlsICYmIHR5cGVvZiBlbWFpbCAhPT0gJ3N0cmluZydcbiAgICB8fCB1c2VybmFtZSAmJiB0eXBlb2YgdXNlcm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdJbnZhbGlkIHVzZXJuYW1lL3Bhc3N3b3JkLicpO1xuICB9XG5cbiAgbGV0IHVzZXI7XG4gIGxldCBpc1ZhbGlkUGFzc3dvcmQgPSBmYWxzZTtcbiAgbGV0IHF1ZXJ5O1xuICBpZiAoZW1haWwgJiYgdXNlcm5hbWUpIHtcbiAgICBxdWVyeSA9IHsgZW1haWwsIHVzZXJuYW1lIH07XG4gIH0gZWxzZSBpZiAoZW1haWwpIHtcbiAgICBxdWVyeSA9IHsgZW1haWwgfTtcbiAgfSBlbHNlIHtcbiAgICBxdWVyeSA9IHsgJG9yOiBbeyB1c2VybmFtZSB9LCB7IGVtYWlsOiB1c2VybmFtZSB9XSB9O1xuICB9XG4gIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBjb25maWcuZGF0YWJhc2UuZmluZCgnX1VzZXInLCBxdWVyeSk7XG4gIGlmICghcmVzdWx0cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCwgJ0ludmFsaWQgdXNlcm5hbWUvcGFzc3dvcmQuJyk7XG4gIH1cblxuICBpZiAocmVzdWx0cy5sZW5ndGggPiAxKSB7IC8vIGNvcm5lciBjYXNlIHdoZXJlIHVzZXIxIGhhcyB1c2VybmFtZSA9PSB1c2VyMiBlbWFpbFxuICAgIGNvbmZpZy5sb2dnZXJDb250cm9sbGVyLndhcm4oJ1RoZXJlIGlzIGEgdXNlciB3aGljaCBlbWFpbCBpcyB0aGUgc2FtZSBhcyBhbm90aGVyIHVzZXJcXCdzIHVzZXJuYW1lLCBsb2dnaW5nIGluIGJhc2VkIG9uIHVzZXJuYW1lJyk7XG4gICAgdXNlciA9IHJlc3VsdHMuZmlsdGVyKCh1c2VyKSA9PiB1c2VyLnVzZXJuYW1lID09PSB1c2VybmFtZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgdXNlciA9IHJlc3VsdHNbMF07XG4gIH1cblxuICBpc1ZhbGlkUGFzc3dvcmQgPSBhd2FpdCBwYXNzd29yZENyeXB0by5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgY29uc3QgYWNjb3VudExvY2tvdXRQb2xpY3kgPSBuZXcgQWNjb3VudExvY2tvdXQodXNlciwgY29uZmlnKTtcbiAgYXdhaXQgYWNjb3VudExvY2tvdXRQb2xpY3kuaGFuZGxlTG9naW5BdHRlbXB0KGlzVmFsaWRQYXNzd29yZCk7XG4gIGlmICghaXNWYWxpZFBhc3N3b3JkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdJbnZhbGlkIHVzZXJuYW1lL3Bhc3N3b3JkLicpO1xuICB9XG4gIC8vIEVuc3VyZSB0aGUgdXNlciBpc24ndCBsb2NrZWQgb3V0XG4gIC8vIEEgbG9ja2VkIG91dCB1c2VyIHdvbid0IGJlIGFibGUgdG8gbG9naW5cbiAgLy8gVG8gbG9jayBhIHVzZXIgb3V0LCBqdXN0IHNldCB0aGUgQUNMIHRvIGBtYXN0ZXJLZXlgIG9ubHkgICh7fSkuXG4gIC8vIEVtcHR5IEFDTCBpcyBPS1xuICBpZiAoIWF1dGguaXNNYXN0ZXIgJiYgdXNlci5BQ0wgJiYgT2JqZWN0LmtleXModXNlci5BQ0wpLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdJbnZhbGlkIHVzZXJuYW1lL3Bhc3N3b3JkLicpO1xuICB9XG4gIGlmIChjb25maWcudmVyaWZ5VXNlckVtYWlscyAmJiBjb25maWcucHJldmVudExvZ2luV2l0aFVudmVyaWZpZWRFbWFpbCAmJiAhdXNlci5lbWFpbFZlcmlmaWVkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLkVNQUlMX05PVF9GT1VORCwgJ1VzZXIgZW1haWwgaXMgbm90IHZlcmlmaWVkLicpO1xuICB9XG5cbiAgZGVsZXRlIHVzZXIucGFzc3dvcmQ7XG5cbiAgLy8gU29tZXRpbWVzIHRoZSBhdXRoRGF0YSBzdGlsbCBoYXMgbnVsbCBvbiB0aGF0IGtleXNcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhcnNlLWNvbW11bml0eS9wYXJzZS1zZXJ2ZXIvaXNzdWVzLzkzNVxuICBpZiAodXNlci5hdXRoRGF0YSkge1xuICAgIE9iamVjdC5rZXlzKHVzZXIuYXV0aERhdGEpLmZvckVhY2goKHByb3ZpZGVyKSA9PiB7XG4gICAgICBpZiAodXNlci5hdXRoRGF0YVtwcm92aWRlcl0gPT09IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIHVzZXIuYXV0aERhdGFbcHJvdmlkZXJdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyh1c2VyLmF1dGhEYXRhKS5sZW5ndGggPT0gMCkge1xuICAgICAgZGVsZXRlIHVzZXIuYXV0aERhdGE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVzZXI7XG59XG4iXX0=